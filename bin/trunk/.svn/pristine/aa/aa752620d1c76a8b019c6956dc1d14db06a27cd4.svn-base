/* 
 * File:   main.cpp
 * Author: Hwah Shih Yiew
 *
 * Created on December 9, 2009, 4:23 PM
 */

#include "SSNpParser_d.h"
/*
 * 
 */
#define TOTAL_QRY_FIELDS 5
#define VARIANT_POS     45

FILE *g_pfSnpLst, *g_pfOut, *g_pfIn,*g_pfStats;
char g_acBuf[1024], *g_pChr;
unsigned int g_unBufSize = sizeof(g_acBuf);
SYNO_LIST g_SynoList; stStats g_stStats;


static void banner(char *argv[])
{
    printf("Synamatix SSNpParser Copyright 2009 Synamatix Sdn Bhd\n");
    printf("Built %s %s\n", __DATE__, __TIME__);
    printf("Usage: %s", argv[0]);
    printf(" <Input file generated by SynaSearch> <SNV_SNP list filename> <output filename>\n\n");
}


void ProcessSSOutFile()
{
    char * fields[4]; char acQrySeq[100],acSbjSeq[100];
    int nIdx=0, nQryStart=0, nQryStop=0, nSbjStart=0, nSbjStop=0;
    bool bGeneFound=true,bInRange=true, bCompleted=false, bNoHit=false;
    float fCodon; unsigned unSeqIdx;
    stSyno *pstSyno=NULL; stKey *pKey=NULL;

    while (!feof(g_pfIn))
    {
        if (!fgets(g_acBuf,g_unBufSize,g_pfIn)) break;
        g_pChr = strchr(g_acBuf, '\n'); if (g_pChr) {*g_pChr = '\0';}
        g_pChr = strchr(g_acBuf, '\r'); if (g_pChr) {*g_pChr = '\0';}
        if ((g_acBuf[0] == '\0') || (g_acBuf[0] == '#')) {continue;}
        
        if ((strncmp(g_acBuf, "Query=", 6) == 0))
        {
            if (bNoHit){      
                memcpy(pstSyno->acStatus,"NH",2); bCompleted = true;
            }
            else if (!bGeneFound){                
                memcpy(pstSyno->acStatus,"MM",2); bCompleted = true;
            }
            else if (!bInRange){                
                memcpy(pstSyno->acStatus,"OR",2); bCompleted = true;
            }

            if (bCompleted) g_SynoList[pKey]=pstSyno;
            
            bGeneFound=bInRange=bCompleted=bNoHit=false; nIdx=0;                       
            pKey = new stKey;  pstSyno = new stSyno;

            g_pChr = strtok(g_acBuf+7,"|");

            while (g_pChr){
                if (nIdx==1)
                    pKey->unGiNum = atol(g_pChr);
                else if (nIdx==2)
                    pKey->unOffset = atol(g_pChr);
                else if (nIdx==3)
                {
                    pKey->cRefBase = g_pChr[0];pKey->cVarBase = g_pChr[1];
                }
                else if (nIdx==4){
                    pstSyno->pcGeneIDs = new char[strlen(g_pChr)+1];
                    strcpy(pstSyno->pcGeneIDs,g_pChr);
                    strupr(pstSyno->pcGeneIDs);
                }
                if (++nIdx == TOTAL_QRY_FIELDS) break;
                g_pChr=strtok(NULL,"|");
            }            
        }
        else if (!bCompleted && g_acBuf[0] == '>')
        {
            g_pChr = strstr(g_acBuf,"GN="); if (!g_pChr) continue;
            //bGeneFound=true;   
            strupr(g_pChr); if (strstr(g_pChr,pstSyno->pcGeneIDs)) bGeneFound = true;
        }
         
        else if (!bCompleted && bGeneFound && strncmp(g_acBuf, "Query:", 6) == 0)
        {
            rowParser(g_acBuf, " ", fields, 4);
            nQryStart = (unsigned short)atoi(fields[1]);
            nQryStop = (unsigned short)atoi(fields[3]);
            strcpy(acQrySeq, fields[2]);

            bInRange = inRange(nQryStart, nQryStop, VARIANT_POS);
            if (!bInRange) bGeneFound=false;
        }
        else if (!bCompleted && bGeneFound && bInRange && strncmp(g_acBuf, "Sbjct:", 6) == 0)
        {
            rowParser(g_acBuf, " ", fields, 4); strcpy(acSbjSeq, fields[2]);
            nSbjStart = (size_t)atoi(fields[1]); nSbjStop = (size_t)atoi(fields[3]);

            if (nQryStart < nQryStop){
                fCodon = (VARIANT_POS - nQryStart + 3)/3.0;
                unSeqIdx = (unsigned)fCodon -1;
            }
            else{
                fCodon = (VARIANT_POS - nQryStop + 3)/3.0;
                unSeqIdx = strlen(acQrySeq) - (unsigned)fCodon;
            }

            if (acSbjSeq[unSeqIdx] != acQrySeq[unSeqIdx]){
                memcpy(pstSyno->acStatus,"NS",2);         
                pstSyno->acProtVar[0] = acSbjSeq[unSeqIdx];
                pstSyno->acProtVar[1] = acQrySeq[unSeqIdx];
            }
            else                
                memcpy(pstSyno->acStatus,"S ",2);

            bCompleted = true;
        }
        else if (strncmp(g_acBuf, "No significant", 14) == 0)
            bCompleted = bNoHit = true;        
    }

    if (!bGeneFound)        
        memcpy(pstSyno->acStatus,"UM",2);    
    else if (!bInRange)        
        memcpy(pstSyno->acStatus,"OR",2);
        
    g_SynoList[pKey]=pstSyno; 
}

void PrintNewSNPList()
{
    unsigned int /*nHeader=0,*/nCnt=0; SYNO_LIST::iterator itr; stKey SynoKey;

    if (!feof(g_pfSnpLst))
    {
        if (fgets(g_acBuf, g_unBufSize,g_pfSnpLst))
        {
            g_pChr = strchr(g_acBuf,'\n'); if (g_pChr) {*g_pChr='\0';} fprintf(g_pfOut,"%s",g_acBuf);
            fprintf(g_pfOut,"\tSynonymous(S)_Non-Synonymous(NS)\tProtein_Variant\n"); 
        }
    }

    while (!feof(g_pfSnpLst))
    {
        if (!fgets(g_acBuf, g_unBufSize,g_pfSnpLst)) break;

        g_pChr = strchr(g_acBuf,'\n'); if (g_pChr) {*g_pChr='\0';} fprintf(g_pfOut,"%s",g_acBuf);

        /*if (strncmp(g_acBuf,"chr",3)!=0)
        {
            //fprintf(g_pfOut,"\tSynonymous(S)_Non-Synonymous(NS)\tProtein_Variant\n"); continue;
        } */

        g_pChr = strchr(g_acBuf,'\t'); nCnt=1;

        while(g_pChr){
            if(++nCnt > 9) break;
            g_pChr = strchr(g_pChr+1,'\t');
        }

        if (!g_pChr) continue;

        if (g_pChr[1]=='-'){
            fprintf(g_pfOut,"\t-\t-\n"); continue;
        }
        else{
            g_stStats.unTotalRec++; nCnt=1; g_pChr = strtok(g_acBuf,"\t");
            while (g_pChr)
            {
                if (nCnt==2)
                    SynoKey.unGiNum= atol(g_pChr);
                else if (nCnt==3)
                    SynoKey.unOffset = atol(g_pChr);
                else if (nCnt==4){
                    SynoKey.cRefBase = g_pChr[0];SynoKey.cVarBase = g_pChr[2];
                }
                if (++nCnt > 4) break;  g_pChr = strtok(NULL,"\t");
            }

            itr = g_SynoList.find(&SynoKey);

            if (itr!=g_SynoList.end()){
                fprintf(g_pfOut,"\t%c%c",(*itr->second).acStatus[0],(*itr->second).acStatus[1]);

                if ((*itr->second).acStatus[0]=='N'&&(*itr->second).acStatus[1]=='S')
                {
                    fprintf(g_pfOut,"\t%c>%c",(*itr->second).acProtVar[0],(*itr->second).acProtVar[1]);
                    g_stStats.unNS++;
                }
                else
                {
                    fprintf(g_pfOut,"\t-");
                    
                    if ((*itr->second).acStatus[0]=='S')
                        g_stStats.unS++;
                    else if ((*itr->second).acStatus[0]=='N'&&(*itr->second).acStatus[1]=='H')
                        g_stStats.unNH++;
                    else if ((*itr->second).acStatus[0]=='M'&&(*itr->second).acStatus[1]=='M')
                        g_stStats.unMM++;
                    else if ((*itr->second).acStatus[0]=='O'&&(*itr->second).acStatus[1]=='R')
                        g_stStats.unOR++;
                }
                fprintf(g_pfOut,"\n");
            }
            else{
                fprintf(g_pfOut,"\tNF\t-\n");
            }
        }
    }
}

unsigned int g_unGINums[24] = {89161185,89161199,89161205,89161207,51511721,89161210,
                             89161213,51511724,89161216,89161187,51511727,89161190,
                             51511729,51511730,51511731,51511732,51511734,51511735,
                             42406306,51511747,51511750,89161203,89161218,89161220};

void GetChrNum(FILE *pf, unsigned long unGiNum)
{
  
     for (int i=0;i<22;i++)
     { 
          if (g_unGINums[i] == unGiNum)
          {
             fprintf(pf,"chr%d",i+1); return;
          }
     }
    
     if (g_unGINums[22]==unGiNum)  
     {
        fprintf(pf,"chrX"); return;
     }
     else if (g_unGINums[23]==unGiNum)
     {
        fprintf(pf,"chrY"); return;
     }
     
     fprintf(pf,"chr0");
       
} 


void OutSynFiles()
{
        FILE *pfSyno, *pfNonSyno, *pfMM;

        pfSyno = fopen("Syno.rpt","w");pfNonSyno = fopen("NonSyno.rpt","w");pfMM = fopen("MMatch.rpt","w");  
            
	for (SYNO_LIST::iterator itr = g_SynoList.begin(); itr!=g_SynoList.end(); itr++)
	{                   
                if ((*itr->second).acStatus[0]=='S')
                {
                   GetChrNum(pfSyno,(*itr->first).unGiNum);   
                   fprintf(pfSyno,":%u-%u\n",(*itr->first).unOffset,(*itr->first).unOffset);
                }
                else if ((*itr->second).acStatus[0]=='N' && (*itr->second).acStatus[1]=='S')
                {
                   GetChrNum(pfNonSyno,(*itr->first).unGiNum);
                   fprintf(pfNonSyno,":%u-%u\n",(*itr->first).unOffset,(*itr->first).unOffset);
                }
                else if ((*itr->second).acStatus[0]=='M' && (*itr->second).acStatus[1]=='M')
                {
                   GetChrNum(pfMM,(*itr->first).unGiNum);
                   fprintf(pfMM,":%u-%u\n",(*itr->first).unOffset,(*itr->first).unOffset);
                }
	}

        if (pfSyno) fclose(pfSyno);  if (pfNonSyno) fclose(pfNonSyno);  if (pfMM) fclose(pfMM);
}

void PrintStatsRpt()
{
    fprintf(g_pfStats,"\tTotal\tPercentage(%%)\n");
    fprintf(g_pfStats,"Queries\t%u\n",g_stStats.unTotalRec);
    fprintf(g_pfStats,"Synonymous(S)\t%u\t%.2f\n",g_stStats.unS,Percentage(g_stStats.unS,g_stStats.unTotalRec));
    fprintf(g_pfStats,"Non-Synonymous(NS)\t%u\t%.2f\n",g_stStats.unNS,Percentage(g_stStats.unNS,g_stStats.unTotalRec));
    fprintf(g_pfStats,"Missed Matched\t%u\t%.2f\n",g_stStats.unMM,Percentage(g_stStats.unMM,g_stStats.unTotalRec));
    fprintf(g_pfStats,"No Hit\t%u\t%.2f\n",g_stStats.unNH,Percentage(g_stStats.unNH,g_stStats.unTotalRec));
    fprintf(g_pfStats,"Out of Range\t%u\t%.2f\n",g_stStats.unOR,Percentage(g_stStats.unOR,g_stStats.unTotalRec));
}


int main(int argc, char** argv) {
    if (argc <4) {banner(argv); exit(9);}

    g_pfIn = fopen(argv[1], "r");
    if (!g_pfIn) {fprintf(stderr,"Failed to open %s ....\n",argv[1]); goto Exit;}

    g_pfSnpLst = fopen(argv[2], "r");
    if (!g_pfSnpLst) {fprintf(stderr,"Failed to open %s ....\n",argv[2]); goto Exit;}

    g_pfOut = fopen(argv[3], "w");
    if (!g_pfOut) {fprintf(stderr,"Failed to open %s ....\n",argv[3]); goto Exit;}

    g_pfStats = fopen("SynoStats.rpt","w");
    if (!g_pfStats) {fprintf(stderr,"Failed to open SynoStats.rpt ....\n"); goto Exit;}

    ProcessSSOutFile(); PrintNewSNPList(); PrintStatsRpt(); OutSynFiles();  

 Exit:
    if (g_pfIn) fclose(g_pfIn); if (g_pfSnpLst) fclose(g_pfSnpLst); 
    if (g_pfOut) fclose(g_pfOut); if (g_pfStats) fclose(g_pfStats);

    SYNO_LIST::iterator itr = g_SynoList.begin();
    
    while (itr!= g_SynoList.end())
    {
       delete itr->first; delete itr->second;
       itr++;
    }
    g_SynoList.clear();
    return (EXIT_SUCCESS);
}

    



